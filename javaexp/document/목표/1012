**자바 인터페이스의 세계로의 여정에 오신 것을 환영합니다!**

### 1. 흥미로운 도입
전자 제품을 사용할 떄 리모컨을 생각해보세요. 다양한 제조사와 모델의 전자 제품이 있지만, 
리모컨의 기본 버튼들 (예: 전원,볼륨,채널변경)은 대부분 비슷합니다.
이러한 리모컨은 각 제품에 대한 '인터페이스' 역할을 합니다.
자바의 인터페이스도 비슷한 개념입니다. 다양한 클래스들이 동일한 인터페이스를 따를때,
그들은 동일한 '약속' 또는 '규약'을 준수하게 됩니다.

### 2. 학습목표
- 자바의 인터페이스가 무엇인지 이해합니다.
- 인터페이스의 선언과 구현 방법을 학습합니다.
- 다중 상속과 인터페이스의 관계를 파악합니다.
- 인터페이스를 사용하는 이유와 장점을 이해합니다.

### 3. 주요 핵심 키워드와 개념
-**인터페이스(Interface)** : 추상 메소드와 상수만을 포함하는 타입. 
						클래스와는 달리 다중 상속(상위 객체가 여러개)이 가능합니다.
-**구현(Implement)** : 클래스가 인터페이스를 따르기로 선언하면,
					해당 클래스는 인터페이스에 정의된 모든 메소드를 구현해야 합니다. 
-**다중 상속** : 하나의 클래스가 여러 인터페이스를 동시에 구현할 수 있습니다. 
-**디폴트 메소드 & 정적 메소드** : 자바 8부터 인터페이스에 허용된 메소드 타입.

### 4. 생각하고 토론해볼 내용
- 인터페이스와 추상 클래스의 차이점은 무엇인가요?
- 다중 상속의 문제점은 무엇이며, 인터페이스는 이를 어떻게 해결하는가?
- 실제 프로젝트에서 인터페이스를 어떻게 활용할 수 있을까?

### 5. 간단한 퀴즈
1) 인터페이스 내에서 변수(상수)는 어떤 특성을 기본적으로 가집니까?
	-a)`private`
	-b)`protected`
	-c)`public static final`
	-d)`private static`
 
 2) 인터페이스의 주요 목적 중 아닌 것은 무엇인가요?
 	-a) 다중 상속을 가능하게 한다.
 	-b) 객체의 생성을 도와준다.
 	-c) 구현 클래스에 특정 메소드 구현을 강제한다.
 	-d) 일관된 방식으로 갹채룰 사용할 수 있게한다.
 	
 인터페이스는 자바 프로그래밍에서 매우 중요한 부분입니다.
 이를 통해 더욱 유연하고 효율적인 코드 설계가 가능해집니다.
 합께 깊게 탐구해봅시다!