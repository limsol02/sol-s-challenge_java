### **JAVA I/O**
### 1. 흥미로운 도입
-**스토리텔링** : 
	"상상해보세요. 여러분이 데이터를 파일에 저장하거나, 그 피알로부터 데이터를
	읽어야 하는 상황이 옵니다. Java의 I/O 패키지를 모르면 어떻게 해야 할지
	모르겠죠? 오늘은 Java에서 제공하는 I/O 도구들을 배워보도록 하겠습니다."
	
### 2. 학습목표
- JAVA의 I/O 스트림 개념 이해
- 다향한 I/O클래스와 그 사용 방법 습득
- 파일 읽기/ 쓰기를 통한 데이터 처리 방법 학습

### 3. 주요 핵심 키워드와 개념
- **스트림(Stream)** : 데이터를 연속적으로 처리하기 위한 일련의 데이터의 흐름.
- **바이트 기반 스트림** : `InputStream`, `OutputStream` 등
- **문자 기반 스트림** : `Reader`, `Writer` 등
- **버퍼(Buffer)** : 데이터를 한 곳에서 다른 곳으로 전송할 때 임시로 그 데이터를 보관하는 메모리 영역.
- **파일 I/O** : `FileInputStream`, `FileOutputStream`, `FileReader`, `FileWriter` 등.

### 4. 생각하고 토론해볼 내용
**효율성** : 버퍼를 사용하는 것과 사용하지 않는 것 중 어느 것이 더 효율적일까?
**보안** : 파일 I/O를 사용할 때 어떤 보안 측면을 고려해야 하는가?
**에러 핸들링** : I/O 작업 중 에러가 발생했을 때 어떻게 처리해야 하는가?

### 5. 간단한 퀴즈
1.**다중 선택** : Java에서 스트림은 어떤 종류로 분류될 수 있는가?
	-[] A. Byte 스트림만
	-[] B. Char 스트림만
	-[] C. Byte 스트림과 Char 스트림
	-[] D. None of the above
	
2.**단답형** : 데이터를 임시로 저장하는 메모리 영역을 무엇이라고 하는가?

3.**참/거짓** : `FileReader`는 바이트 기반의 입력 스트림이다(예/아니오)

### 6. 실무적용 예시
- **로그 파일 생성** : 서버의 작업을 로깅하기위해 파일에 로그를 작성하는 방법을 구현
- **설정 파일 읽기** : 애플리케이션의 설정을 담고있는 파일을 읽어 설정 값을 로드하는 기능 개발
- **데이터 백업** : 데이터베이스의 내용을 주기적으로 파일로 백업하는 프로세스 구현