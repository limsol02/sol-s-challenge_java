### 1. 흥미로운 도입
상상해보세요. 한편의 대극장에서 다양한이야기가 펼쳐지고 있습니다. 각각의 이야기는 
자신만의 특별한 배경과 등장인물을 가지고 있습니다. 이제, 이 다채로운 이야기들을 하나의 큰
무대위에서 서로 연결하는 시간을 가져보겠습니다. SQL의 JOIN구문과 서브쿼리(Subquery)는
바로 이런 역할을 합니다. 여러 데이터 테이블들을 서로 연결하고, 복잡한 쿼리 안에서
작은 쿼리를 실행하면서, 데이터의 풍부한 이야기를 들려줍니다.

### 2. 학습목표
- JOIN구문의 다양한 유형을 이해하고 사용할 수 있습니다.
- 서브쿼리의 개념과 사용방법을 배웁니다
- JOIN과 서브쿼리를 사용하여 복잡한 데이터 관계를 해석하고 쿼리할 수 있습니다.

### 3. 주요 핵심 키워드와 개념
- **JOIN**
	- INNER JOIN : 두 테이블의 교집합을 반환합니다.
	- LEFT (OUTER) JOIN : 왼쪽 테이블의 모든 행과 일치하는 오른쪽 테이블의 행을 반환합니다.
	- RIGHT (OUTER) JOIN : 오른쪽 테이블의 모든 행과 일치하는 왼쪽 테이블의 행을 반환합니다.
	- FULL (OUTER) JOIN : 양쪽 테이블의 모든 행을 반환하되, 일치하느 정보가 없는 경우
	
- **서브쿼리 (Subquery)**
	- 한 쿼리 내에 포함된 또 다른 sql쿼리 입니다.
	- 단일 행, 다중 행, 상관 서브쿼리 등 다양한 형태가 있습니다.
	
### 4. 생각하고 토론해볼 내용
- 어떤 상황에서 JOIN대신 서브쿼리를 사용하는 것이 더 유리할까요?
- 성능 최적화 측면에서 JOIN대신 서브쿼리를 사용하는 것이 좋을까요?

### 5. 간단한 퀴즈
1) 다음 중 INNER JOIN의 특징을 올바르게 설명한 것은?
	- a) 두 테이블의 교집합만을 반환한다.
	- b) 한쪽 테이블에만 있는 데이터도 모두 반환한다
	- c) 양쪽 테이블의 모든 행을 반환한다
	- d) 오른쪽 테이블의 모든행과 일치하는 왼쪽 테이블의 행을 반환한다.
	
2) 서브쿼리가 일반적으로 사용되지 않는 경우는 언제인가요?
	- a) 데이터가 매우 많은 경우
	- b) 간단한 쿼리를 작성할때
	- c) 복잡한 계산이 필요한 경우
	- d) 여러 테이블의 데이터를 결합해야 하는 경우
	
### 6. 실무적용 예시
- **고객 관리 시스템** : 고객 테이블과 주문 테이블을 JOIN하여 특정 고객의 주문 내역을 조회합니다.
- **재고 관리 시스템** : 제품 테이블과 재고 테이블을 LEFT JOIN하여 모든 제품의 재고 상태를 확인합니다.
- **마케팅 분석** : 서브쿼리를 사용하여 특정 조건을 만족하는 고객의 평균 구매액을 계산합니다.
- **보고서 생성** : 여러 테이블에서 데이터를 가져와 JOIN하고, 서브쿼리를 사용하여 특정 기준에 따른 집계 데이터를 생성합니다.
