 #### 1. 다형성(Polymorphism)
 
 #### 이유 : 
 - 하나의 인터페이스나 클래스를 다양한 방법으로 동작하게 하여 유연성과 확장성을 증가시킨다
 - 코드의 재사용성을 높이며, 유지보수를 용이하게 한다
 
 #### 장점 : 
 - 유연성 : 하나의 메서드나 클래스가 다양한 객체나 데이터 타입에 대해서 동작할 수 있다.
 	
 	Part p01 = new Cpu();
	p01.same(); p01.system();
		
	Part p02 = new Ram();
	p02.same(); p02.system();
		
	Part p03 = new Ssd();
	p03.same(); p03.system();
 	ㄴ=>추가되는 객체들이 생기면 상속에 의해서 처리하고, 추가되는 기능 메서드만
 		재정의하면 된다.--> 다른 소스에 영향을 미치지 않는 코드 처리 
 
 - 코드 재사용성 : 코드의 중복을 줄이고 통일된 인터페이스를 제공함으로써 코드의 재사용성이 높아진다.
 	
 	// 공통부분 재사용
 	public void same() {
		System.out.println("공통으로 된 컴퓨터 부품입니다.");}
 	
 - 유지보수 : 하나의 메서드나 클래스의 수정으로 다양한 객체나 데이터 타입에 대한 동작을 변경할 수 있다.
 	
 	// Part 의 same() 공통부분 변경 ===> 상속하는 모든 클래스가 동일하게 변경.
 
 #### 실무적 적용 예시 : 
 - **그래픽 사용자 인터페이스(GUI)** : 다양한 GUI 컴포넌트 
 	(버튼, 체크박스, 슬라이더 등)가 같은 메서드(`draw()`,`update()`)를 
 	가지고 있지만, 각 컴포넌트 마다 그 동작이 다르다.
 - **결제 시스템** : 다양한 결제 방법(카드, 페이팔, 비트코인 등)이 있을 때,
 	`Payment` 인터페이스를 구현하는 각 클래스 (`CardPayment`,`PaypalPayment`,`BitcoinPayment` 둥)
 	가 `processPayment()`메서드를 오버라이드 하여 각기 다른 결제 방식을 제공한다.
 	
========================================================================================

#### 2. 추상화(Abstraction)

#### 이유 : 
 - 복잡한 시스템을 단순화시켜 개념적으로 표현하려는 의도로 사용된다.
 - 불필요한 정보를 숨기고 중요한 정보만을 표현함으로써 효율적인 설계와 구현이 가능해진다.
	
#### 장점 :
 - 시스템 복잡도 감소 : 필요한 특성만을 나타내어 복잡도를 줄인다.
 	
 	public void same() {System.out.println("공통으로 된 컴퓨터 부품입니다.");}
	public abstract void system() ;
	ㄴ-> 핵심적으로 기능만 선언, 구체적인 내용은 상속받은 하위 클래스에서 처리
 
 - 유지보수 용이 : 기본 구조 변경없이 구현 내용만을 수정하여 시스템을
 				업데이트 할 수 있다.
 	
 	public class GraphicsCard extends Part{
 		// 추가적인 재정의할 내용만 선언..
 		public abstract void system(){}
 	} 
 	공통 기능메서드 변경으로 상속받은 모든 클래스에 적용가능..
 	
 - 확장성 : 기본 구조를 바꾸지 않고 새로운 기능을 추가하기 쉽나
 
 #### 실무적 적용 예시 : 
 - **데이터베이스 연결** : 데이터베이스에 연결하고 쿼리를 실행하는 복잡한
 	과정을 숨기고, 사용자에게는 간단한 메서드를만 제공한다. (JDBC,ORM 라이브러리)
 	